// <auto-generated />
using System;
using Application.Infrastructure.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Application.Services.DatabaseMigrations.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "address_standardizer");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "address_standardizer_data_us");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "fuzzystrmatch");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "plpgsql");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis_raster");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis_sfcgal");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis_tiger_geocoder");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis_topology");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Application.Domain.Entities.ApplicationRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_application_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("role_name_index");

                    b.ToTable("application_roles", (string)null);
                });

            modelBuilder.Entity("Application.Domain.Entities.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_application_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_application_role_claims_role_id");

                    b.ToTable("application_role_claims", (string)null);
                });

            modelBuilder.Entity("Application.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_application_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("email_index");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("user_name_index");

                    b.ToTable("application_users", (string)null);
                });

            modelBuilder.Entity("Application.Domain.Entities.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_application_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_application_user_claims_user_id");

                    b.ToTable("application_user_claims", (string)null);
                });

            modelBuilder.Entity("Application.Domain.Entities.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_application_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_application_user_logins_user_id");

                    b.ToTable("application_user_logins", (string)null);
                });

            modelBuilder.Entity("Application.Domain.Entities.ApplicationUserRole", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_application_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_application_user_roles_role_id");

                    b.ToTable("application_user_roles", (string)null);
                });

            modelBuilder.Entity("Application.Domain.Entities.ApplicationUserToken", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_application_user_tokens");

                    b.ToTable("application_user_tokens", (string)null);
                });

            modelBuilder.Entity("Application.Domain.Entities.BusinessHours", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<LocalTime?>("CloseTime")
                        .HasColumnType("time")
                        .HasColumnName("close_time");

                    b.Property<int>("DayOfWeekId")
                        .HasColumnType("integer")
                        .HasColumnName("day_of_week_id");

                    b.Property<bool>("IsClosed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_closed");

                    b.Property<LocalTime?>("OpenTime")
                        .HasColumnType("time")
                        .HasColumnName("open_time");

                    b.Property<long>("VenueId")
                        .HasColumnType("bigint")
                        .HasColumnName("venue_id");

                    b.HasKey("Id")
                        .HasName("pk_business_hours");

                    b.HasIndex("DayOfWeekId")
                        .HasDatabaseName("ix_business_hours_day_of_week_id");

                    b.HasIndex("VenueId", "DayOfWeekId")
                        .IsUnique()
                        .HasDatabaseName("ix_business_hours_venue_id_day_of_week_id");

                    b.ToTable("business_hours", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CloseTime = new NodaTime.LocalTime(15, 0),
                            DayOfWeekId = 1,
                            IsClosed = false,
                            OpenTime = new NodaTime.LocalTime(10, 0),
                            VenueId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CloseTime = new NodaTime.LocalTime(22, 0),
                            DayOfWeekId = 2,
                            IsClosed = false,
                            OpenTime = new NodaTime.LocalTime(11, 30),
                            VenueId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            CloseTime = new NodaTime.LocalTime(22, 0),
                            DayOfWeekId = 3,
                            IsClosed = false,
                            OpenTime = new NodaTime.LocalTime(11, 30),
                            VenueId = 1L
                        },
                        new
                        {
                            Id = 4L,
                            CloseTime = new NodaTime.LocalTime(22, 0),
                            DayOfWeekId = 4,
                            IsClosed = false,
                            OpenTime = new NodaTime.LocalTime(11, 30),
                            VenueId = 1L
                        },
                        new
                        {
                            Id = 5L,
                            CloseTime = new NodaTime.LocalTime(22, 0),
                            DayOfWeekId = 5,
                            IsClosed = false,
                            OpenTime = new NodaTime.LocalTime(11, 30),
                            VenueId = 1L
                        },
                        new
                        {
                            Id = 6L,
                            CloseTime = new NodaTime.LocalTime(0, 0),
                            DayOfWeekId = 6,
                            IsClosed = false,
                            OpenTime = new NodaTime.LocalTime(11, 30),
                            VenueId = 1L
                        },
                        new
                        {
                            Id = 7L,
                            CloseTime = new NodaTime.LocalTime(0, 0),
                            DayOfWeekId = 7,
                            IsClosed = false,
                            OpenTime = new NodaTime.LocalTime(11, 30),
                            VenueId = 1L
                        },
                        new
                        {
                            Id = 8L,
                            CloseTime = new NodaTime.LocalTime(23, 0),
                            DayOfWeekId = 1,
                            IsClosed = false,
                            OpenTime = new NodaTime.LocalTime(11, 0),
                            VenueId = 2L
                        },
                        new
                        {
                            Id = 9L,
                            CloseTime = new NodaTime.LocalTime(0, 0),
                            DayOfWeekId = 2,
                            IsClosed = false,
                            OpenTime = new NodaTime.LocalTime(11, 0),
                            VenueId = 2L
                        },
                        new
                        {
                            Id = 10L,
                            CloseTime = new NodaTime.LocalTime(0, 0),
                            DayOfWeekId = 3,
                            IsClosed = false,
                            OpenTime = new NodaTime.LocalTime(11, 0),
                            VenueId = 2L
                        },
                        new
                        {
                            Id = 11L,
                            CloseTime = new NodaTime.LocalTime(0, 0),
                            DayOfWeekId = 4,
                            IsClosed = false,
                            OpenTime = new NodaTime.LocalTime(11, 0),
                            VenueId = 2L
                        },
                        new
                        {
                            Id = 12L,
                            CloseTime = new NodaTime.LocalTime(0, 0),
                            DayOfWeekId = 5,
                            IsClosed = false,
                            OpenTime = new NodaTime.LocalTime(11, 0),
                            VenueId = 2L
                        },
                        new
                        {
                            Id = 13L,
                            CloseTime = new NodaTime.LocalTime(2, 0),
                            DayOfWeekId = 6,
                            IsClosed = false,
                            OpenTime = new NodaTime.LocalTime(11, 0),
                            VenueId = 2L
                        },
                        new
                        {
                            Id = 14L,
                            CloseTime = new NodaTime.LocalTime(2, 0),
                            DayOfWeekId = 7,
                            IsClosed = false,
                            OpenTime = new NodaTime.LocalTime(11, 0),
                            VenueId = 2L
                        },
                        new
                        {
                            Id = 15L,
                            CloseTime = new NodaTime.LocalTime(14, 0),
                            DayOfWeekId = 1,
                            IsClosed = false,
                            OpenTime = new NodaTime.LocalTime(10, 0),
                            VenueId = 3L
                        },
                        new
                        {
                            Id = 16L,
                            DayOfWeekId = 2,
                            IsClosed = true,
                            VenueId = 3L
                        },
                        new
                        {
                            Id = 17L,
                            CloseTime = new NodaTime.LocalTime(21, 0),
                            DayOfWeekId = 3,
                            IsClosed = false,
                            OpenTime = new NodaTime.LocalTime(11, 0),
                            VenueId = 3L
                        },
                        new
                        {
                            Id = 18L,
                            CloseTime = new NodaTime.LocalTime(21, 0),
                            DayOfWeekId = 4,
                            IsClosed = false,
                            OpenTime = new NodaTime.LocalTime(11, 0),
                            VenueId = 3L
                        },
                        new
                        {
                            Id = 19L,
                            CloseTime = new NodaTime.LocalTime(21, 0),
                            DayOfWeekId = 5,
                            IsClosed = false,
                            OpenTime = new NodaTime.LocalTime(11, 0),
                            VenueId = 3L
                        },
                        new
                        {
                            Id = 20L,
                            CloseTime = new NodaTime.LocalTime(22, 0),
                            DayOfWeekId = 6,
                            IsClosed = false,
                            OpenTime = new NodaTime.LocalTime(11, 0),
                            VenueId = 3L
                        },
                        new
                        {
                            Id = 21L,
                            CloseTime = new NodaTime.LocalTime(22, 0),
                            DayOfWeekId = 7,
                            IsClosed = false,
                            OpenTime = new NodaTime.LocalTime(11, 0),
                            VenueId = 3L
                        });
                });

            modelBuilder.Entity("Application.Domain.Entities.DayOfWeek", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsWeekday")
                        .HasColumnType("boolean")
                        .HasColumnName("is_weekday");

                    b.Property<int>("IsoNumber")
                        .HasColumnType("integer")
                        .HasColumnName("iso_number");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("name");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("short_name");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer")
                        .HasColumnName("sort_order");

                    b.HasKey("Id")
                        .HasName("pk_days_of_week");

                    b.HasIndex("IsoNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_days_of_week_iso_number");

                    b.ToTable("days_of_week", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsWeekday = false,
                            IsoNumber = 0,
                            Name = "Sunday",
                            ShortName = "SUN",
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 2,
                            IsWeekday = true,
                            IsoNumber = 1,
                            Name = "Monday",
                            ShortName = "MON",
                            SortOrder = 2
                        },
                        new
                        {
                            Id = 3,
                            IsWeekday = true,
                            IsoNumber = 2,
                            Name = "Tuesday",
                            ShortName = "TUE",
                            SortOrder = 3
                        },
                        new
                        {
                            Id = 4,
                            IsWeekday = true,
                            IsoNumber = 3,
                            Name = "Wednesday",
                            ShortName = "WED",
                            SortOrder = 4
                        },
                        new
                        {
                            Id = 5,
                            IsWeekday = true,
                            IsoNumber = 4,
                            Name = "Thursday",
                            ShortName = "THU",
                            SortOrder = 5
                        },
                        new
                        {
                            Id = 6,
                            IsWeekday = true,
                            IsoNumber = 5,
                            Name = "Friday",
                            ShortName = "FRI",
                            SortOrder = 6
                        },
                        new
                        {
                            Id = 7,
                            IsWeekday = false,
                            IsoNumber = 6,
                            Name = "Saturday",
                            ShortName = "SAT",
                            SortOrder = 7
                        });
                });

            modelBuilder.Entity("Application.Domain.Entities.Venue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("country");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Locality")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("locality");

                    b.Property<Point>("Location")
                        .HasColumnType("geography (point)")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone_number");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("postal_code");

                    b.Property<string>("ProfileImage")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("profile_image");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("region");

                    b.Property<string>("SecondaryAddress")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("secondary_address");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("street_address");

                    b.Property<string>("Website")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("website");

                    b.HasKey("Id")
                        .HasName("pk_venues");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_venues_category_id");

                    b.HasIndex("Location")
                        .HasDatabaseName("ix_venues_location");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Location"), "GIST");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_venues_name");

                    b.ToTable("venues", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CategoryId = 7,
                            Country = "United States",
                            Description = "Local craft brewery featuring house-made beers, pub fare, and live entertainment in a cozy atmosphere.",
                            Email = "info@bullfrogbrewery.com",
                            IsActive = true,
                            Locality = "Williamsport",
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (-77.0057192 41.240432)"),
                            Name = "Bullfrog Brewery",
                            PhoneNumber = "(570) 326-4700",
                            PostalCode = "17701",
                            Region = "PA",
                            StreetAddress = "229 W 4th St",
                            Website = "https://bullfrogbrewery.com"
                        },
                        new
                        {
                            Id = 2L,
                            CategoryId = 1,
                            Country = "United States",
                            Description = "Family-friendly restaurant and ale house serving American cuisine with a great selection of craft beers and cocktails.",
                            Email = "info@thebrickyard.net",
                            IsActive = true,
                            Locality = "Williamsport",
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (-77.0037646 41.2409825)"),
                            Name = "The Brickyard Restaurant & Ale House",
                            PhoneNumber = "(570) 322-3876",
                            PostalCode = "17701",
                            Region = "PA",
                            StreetAddress = "343 Pine St",
                            Website = "https://thebrickyard.net"
                        },
                        new
                        {
                            Id = 3L,
                            CategoryId = 2,
                            Country = "United States",
                            Description = "Upscale gastropub featuring craft cocktails, local beers, and elevated bar food in a sophisticated atmosphere.",
                            Email = "info@thecrookedgoose.com",
                            IsActive = true,
                            Locality = "Williamsport",
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (-77.0047521 41.2407201)"),
                            Name = "The Crooked Goose",
                            PhoneNumber = "(570) 360-7435",
                            PostalCode = "17701",
                            Region = "PA",
                            StreetAddress = "215 W 4th St",
                            Website = "https://thecrookedgoose.com"
                        });
                });

            modelBuilder.Entity("Application.Domain.Entities.VenueCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.Property<string>("Icon")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("icon");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer")
                        .HasColumnName("sort_order");

                    b.HasKey("Id")
                        .HasName("pk_venue_categories");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_venue_categories_name");

                    b.ToTable("venue_categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Dining establishments offering food and beverages",
                            Icon = "🍽️",
                            Name = "Restaurant",
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Venues focused on drinks and nightlife",
                            Icon = "🍸",
                            Name = "Bar",
                            SortOrder = 2
                        },
                        new
                        {
                            Id = 3,
                            Description = "Casual spots for coffee and light meals",
                            Icon = "☕",
                            Name = "Cafe",
                            SortOrder = 3
                        },
                        new
                        {
                            Id = 4,
                            Description = "Venues for dancing and late-night entertainment",
                            Icon = "🪩",
                            Name = "Nightclub",
                            SortOrder = 4
                        },
                        new
                        {
                            Id = 5,
                            Description = "Casual venues with food, drinks, and often live music",
                            Icon = "🍺",
                            Name = "Pub",
                            SortOrder = 5
                        },
                        new
                        {
                            Id = 6,
                            Description = "Venues producing wine, offering tastings, food pairings, and live music",
                            Icon = "🍷",
                            Name = "Winery",
                            SortOrder = 6
                        },
                        new
                        {
                            Id = 7,
                            Description = "Venues brewing their own beer, often with food and live music",
                            Icon = "🍻",
                            Name = "Brewery",
                            SortOrder = 7
                        },
                        new
                        {
                            Id = 9,
                            Description = "Sophisticated venues with cocktails, small plates, and live music",
                            Icon = "🛋️",
                            Name = "Lounge",
                            SortOrder = 8
                        },
                        new
                        {
                            Id = 10,
                            Description = "Intimate dining venues with quality food, wine, and occasional live music",
                            Icon = "🥂",
                            Name = "Bistro",
                            SortOrder = 9
                        });
                });

            modelBuilder.Entity("Application.Domain.Entities.ApplicationRoleClaim", b =>
                {
                    b.HasOne("Application.Domain.Entities.ApplicationRole", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_application_role_claims_asp_net_roles_role_id");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Application.Domain.Entities.ApplicationUserClaim", b =>
                {
                    b.HasOne("Application.Domain.Entities.ApplicationUser", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_application_user_claims_asp_net_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Application.Domain.Entities.ApplicationUserLogin", b =>
                {
                    b.HasOne("Application.Domain.Entities.ApplicationUser", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_application_user_logins_application_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Application.Domain.Entities.ApplicationUserRole", b =>
                {
                    b.HasOne("Application.Domain.Entities.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_application_user_roles_application_roles_role_id");

                    b.HasOne("Application.Domain.Entities.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_application_user_roles_application_users_user_id");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Application.Domain.Entities.ApplicationUserToken", b =>
                {
                    b.HasOne("Application.Domain.Entities.ApplicationUser", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_application_user_tokens_application_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Application.Domain.Entities.BusinessHours", b =>
                {
                    b.HasOne("Application.Domain.Entities.DayOfWeek", "DayOfWeek")
                        .WithMany("BusinessHours")
                        .HasForeignKey("DayOfWeekId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_business_hours_day_of_weeks_day_of_week_id");

                    b.HasOne("Application.Domain.Entities.Venue", "Venue")
                        .WithMany("BusinessHours")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_business_hours_venues_venue_id");

                    b.Navigation("DayOfWeek");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("Application.Domain.Entities.Venue", b =>
                {
                    b.HasOne("Application.Domain.Entities.VenueCategory", "Category")
                        .WithMany("Venues")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_venues_venue_categories_category_id");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Application.Domain.Entities.ApplicationRole", b =>
                {
                    b.Navigation("RoleClaims");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Application.Domain.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Logins");

                    b.Navigation("Tokens");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Application.Domain.Entities.DayOfWeek", b =>
                {
                    b.Navigation("BusinessHours");
                });

            modelBuilder.Entity("Application.Domain.Entities.Venue", b =>
                {
                    b.Navigation("BusinessHours");
                });

            modelBuilder.Entity("Application.Domain.Entities.VenueCategory", b =>
                {
                    b.Navigation("Venues");
                });
#pragma warning restore 612, 618
        }
    }
}
