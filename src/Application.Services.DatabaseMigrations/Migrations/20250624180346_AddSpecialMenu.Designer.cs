// <auto-generated />
using Application.Infrastructure.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Application.Services.DatabaseMigrations.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250624180346_AddSpecialMenu")]
    partial class AddSpecialMenu
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "address_standardizer");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "address_standardizer_data_us");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "fuzzystrmatch");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "plpgsql");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis_raster");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis_sfcgal");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis_tiger_geocoder");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis_topology");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Application.Domain.Entities.BusinessHoursEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<LocalTime?>("CloseTime")
                        .HasColumnType("time")
                        .HasColumnName("close_time");

                    b.Property<int>("DayOfWeekId")
                        .HasColumnType("integer")
                        .HasColumnName("day_of_week_id");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_closed");

                    b.Property<LocalTime?>("OpenTime")
                        .HasColumnType("time")
                        .HasColumnName("open_time");

                    b.Property<long>("VenueId")
                        .HasColumnType("bigint")
                        .HasColumnName("venue_id");

                    b.HasKey("Id")
                        .HasName("pk_business_hours");

                    b.HasIndex("DayOfWeekId")
                        .HasDatabaseName("ix_business_hours_day_of_week_id");

                    b.HasIndex("VenueId", "DayOfWeekId")
                        .IsUnique()
                        .HasDatabaseName("ix_business_hours_venue_id_day_of_week_id");

                    b.ToTable("business_hours", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CloseTime = new NodaTime.LocalTime(15, 0),
                            DayOfWeekId = 1,
                            IsClosed = false,
                            OpenTime = new NodaTime.LocalTime(10, 0),
                            VenueId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CloseTime = new NodaTime.LocalTime(22, 0),
                            DayOfWeekId = 2,
                            IsClosed = false,
                            OpenTime = new NodaTime.LocalTime(11, 30),
                            VenueId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            CloseTime = new NodaTime.LocalTime(22, 0),
                            DayOfWeekId = 3,
                            IsClosed = false,
                            OpenTime = new NodaTime.LocalTime(11, 30),
                            VenueId = 1L
                        },
                        new
                        {
                            Id = 4L,
                            CloseTime = new NodaTime.LocalTime(22, 0),
                            DayOfWeekId = 4,
                            IsClosed = false,
                            OpenTime = new NodaTime.LocalTime(11, 30),
                            VenueId = 1L
                        },
                        new
                        {
                            Id = 5L,
                            CloseTime = new NodaTime.LocalTime(22, 0),
                            DayOfWeekId = 5,
                            IsClosed = false,
                            OpenTime = new NodaTime.LocalTime(11, 30),
                            VenueId = 1L
                        },
                        new
                        {
                            Id = 6L,
                            CloseTime = new NodaTime.LocalTime(0, 0),
                            DayOfWeekId = 6,
                            IsClosed = false,
                            OpenTime = new NodaTime.LocalTime(11, 30),
                            VenueId = 1L
                        },
                        new
                        {
                            Id = 7L,
                            CloseTime = new NodaTime.LocalTime(0, 0),
                            DayOfWeekId = 7,
                            IsClosed = false,
                            OpenTime = new NodaTime.LocalTime(11, 30),
                            VenueId = 1L
                        },
                        new
                        {
                            Id = 8L,
                            CloseTime = new NodaTime.LocalTime(23, 0),
                            DayOfWeekId = 1,
                            IsClosed = false,
                            OpenTime = new NodaTime.LocalTime(11, 0),
                            VenueId = 2L
                        },
                        new
                        {
                            Id = 9L,
                            CloseTime = new NodaTime.LocalTime(0, 0),
                            DayOfWeekId = 2,
                            IsClosed = false,
                            OpenTime = new NodaTime.LocalTime(11, 0),
                            VenueId = 2L
                        },
                        new
                        {
                            Id = 10L,
                            CloseTime = new NodaTime.LocalTime(0, 0),
                            DayOfWeekId = 3,
                            IsClosed = false,
                            OpenTime = new NodaTime.LocalTime(11, 0),
                            VenueId = 2L
                        },
                        new
                        {
                            Id = 11L,
                            CloseTime = new NodaTime.LocalTime(0, 0),
                            DayOfWeekId = 4,
                            IsClosed = false,
                            OpenTime = new NodaTime.LocalTime(11, 0),
                            VenueId = 2L
                        },
                        new
                        {
                            Id = 12L,
                            CloseTime = new NodaTime.LocalTime(0, 0),
                            DayOfWeekId = 5,
                            IsClosed = false,
                            OpenTime = new NodaTime.LocalTime(11, 0),
                            VenueId = 2L
                        },
                        new
                        {
                            Id = 13L,
                            CloseTime = new NodaTime.LocalTime(2, 0),
                            DayOfWeekId = 6,
                            IsClosed = false,
                            OpenTime = new NodaTime.LocalTime(11, 0),
                            VenueId = 2L
                        },
                        new
                        {
                            Id = 14L,
                            CloseTime = new NodaTime.LocalTime(2, 0),
                            DayOfWeekId = 7,
                            IsClosed = false,
                            OpenTime = new NodaTime.LocalTime(11, 0),
                            VenueId = 2L
                        },
                        new
                        {
                            Id = 15L,
                            CloseTime = new NodaTime.LocalTime(14, 0),
                            DayOfWeekId = 1,
                            IsClosed = false,
                            OpenTime = new NodaTime.LocalTime(10, 0),
                            VenueId = 3L
                        },
                        new
                        {
                            Id = 16L,
                            DayOfWeekId = 2,
                            IsClosed = true,
                            VenueId = 3L
                        },
                        new
                        {
                            Id = 17L,
                            CloseTime = new NodaTime.LocalTime(21, 0),
                            DayOfWeekId = 3,
                            IsClosed = false,
                            OpenTime = new NodaTime.LocalTime(11, 0),
                            VenueId = 3L
                        },
                        new
                        {
                            Id = 18L,
                            CloseTime = new NodaTime.LocalTime(21, 0),
                            DayOfWeekId = 4,
                            IsClosed = false,
                            OpenTime = new NodaTime.LocalTime(11, 0),
                            VenueId = 3L
                        },
                        new
                        {
                            Id = 19L,
                            CloseTime = new NodaTime.LocalTime(21, 0),
                            DayOfWeekId = 5,
                            IsClosed = false,
                            OpenTime = new NodaTime.LocalTime(11, 0),
                            VenueId = 3L
                        },
                        new
                        {
                            Id = 20L,
                            CloseTime = new NodaTime.LocalTime(22, 0),
                            DayOfWeekId = 6,
                            IsClosed = false,
                            OpenTime = new NodaTime.LocalTime(11, 0),
                            VenueId = 3L
                        },
                        new
                        {
                            Id = 21L,
                            CloseTime = new NodaTime.LocalTime(22, 0),
                            DayOfWeekId = 7,
                            IsClosed = false,
                            OpenTime = new NodaTime.LocalTime(11, 0),
                            VenueId = 3L
                        });
                });

            modelBuilder.Entity("Application.Domain.Entities.DayOfWeekEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsWeekday")
                        .HasColumnType("boolean")
                        .HasColumnName("is_weekday");

                    b.Property<int>("IsoNumber")
                        .HasColumnType("integer")
                        .HasColumnName("iso_number");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("name");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("short_name");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer")
                        .HasColumnName("sort_order");

                    b.HasKey("Id")
                        .HasName("pk_days_of_week");

                    b.HasIndex("IsoNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_days_of_week_iso_number");

                    b.ToTable("days_of_week", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsWeekday = false,
                            IsoNumber = 0,
                            Name = "Sunday",
                            ShortName = "SUN",
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 2,
                            IsWeekday = true,
                            IsoNumber = 1,
                            Name = "Monday",
                            ShortName = "MON",
                            SortOrder = 2
                        },
                        new
                        {
                            Id = 3,
                            IsWeekday = true,
                            IsoNumber = 2,
                            Name = "Tuesday",
                            ShortName = "TUE",
                            SortOrder = 3
                        },
                        new
                        {
                            Id = 4,
                            IsWeekday = true,
                            IsoNumber = 3,
                            Name = "Wednesday",
                            ShortName = "WED",
                            SortOrder = 4
                        },
                        new
                        {
                            Id = 5,
                            IsWeekday = true,
                            IsoNumber = 4,
                            Name = "Thursday",
                            ShortName = "THU",
                            SortOrder = 5
                        },
                        new
                        {
                            Id = 6,
                            IsWeekday = true,
                            IsoNumber = 5,
                            Name = "Friday",
                            ShortName = "FRI",
                            SortOrder = 6
                        },
                        new
                        {
                            Id = 7,
                            IsWeekday = false,
                            IsoNumber = 6,
                            Name = "Saturday",
                            ShortName = "SAT",
                            SortOrder = 7
                        });
                });

            modelBuilder.Entity("Application.Domain.Entities.SpecialItemCategoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.Property<string>("Icon")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("icon");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer")
                        .HasColumnName("sort_order");

                    b.HasKey("Id")
                        .HasName("pk_special_item_categories");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_special_item_categories_name");

                    b.ToTable("special_item_categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Food specials, appetizers, and meal deals",
                            Icon = "🍔",
                            Name = "Food",
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Drink specials, happy hours, and beverage promotions",
                            Icon = "🍺",
                            Name = "Drink",
                            SortOrder = 2
                        },
                        new
                        {
                            Id = 3,
                            Description = "Live music, DJs, trivia, karaoke, and other events",
                            Icon = "🎵",
                            Name = "Entertainment",
                            SortOrder = 3
                        });
                });

            modelBuilder.Entity("Application.Domain.Entities.SpecialItemEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int>("SpecialItemCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("special_item_category_id");

                    b.Property<long>("SpecialsMenuId")
                        .HasColumnType("bigint")
                        .HasColumnName("specials_menu_id");

                    b.HasKey("Id")
                        .HasName("pk_special_items");

                    b.HasIndex("SpecialItemCategoryId")
                        .HasDatabaseName("ix_special_items_special_item_category_id");

                    b.HasIndex("SpecialsMenuId")
                        .HasDatabaseName("ix_special_items_specials_menu_id");

                    b.ToTable("special_items", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Description = "Live music showcasing the best in local, regional, and national talent. Various genres from rock to jazz.",
                            IsActive = true,
                            Name = "Live Music Friday/Saturday",
                            SpecialItemCategoryId = 3,
                            SpecialsMenuId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Description = "Enjoy $1 off all draft beers during happy hour.",
                            IsActive = true,
                            Name = "$1 Off Draft Beers",
                            SpecialItemCategoryId = 2,
                            SpecialsMenuId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            Description = "All house wines for just $5 during happy hour.",
                            IsActive = true,
                            Name = "$5 House Wines",
                            SpecialItemCategoryId = 2,
                            SpecialsMenuId = 2L
                        },
                        new
                        {
                            Id = 4L,
                            Description = "Sweet and spicy chicken sandwich with sweet n spicy sauce, lettuce, and pickles.",
                            IsActive = true,
                            Name = "Sweet & Spicy Chicken Sandwich",
                            SpecialItemCategoryId = 1,
                            SpecialsMenuId = 3L
                        },
                        new
                        {
                            Id = 5L,
                            Description = "Pub Trivia with first and second place prizes. Sponsored by Bacardi Oakheart.",
                            IsActive = true,
                            Name = "Pub Trivia",
                            SpecialItemCategoryId = 3,
                            SpecialsMenuId = 4L
                        },
                        new
                        {
                            Id = 6L,
                            Description = "Our valued Mug club members enjoy their First beer, of their choice, on US!!",
                            IsActive = true,
                            Name = "Free First Beer for Mug Club Members",
                            SpecialItemCategoryId = 2,
                            SpecialsMenuId = 5L
                        },
                        new
                        {
                            Id = 7L,
                            Description = "Special brunch menu served from 10am to 2pm every Sunday.",
                            IsActive = true,
                            Name = "Sunday Brunch Menu",
                            SpecialItemCategoryId = 1,
                            SpecialsMenuId = 6L
                        },
                        new
                        {
                            Id = 8L,
                            Description = "Enjoy our specially crafted cocktails at a reduced price.",
                            IsActive = true,
                            Name = "Discounted Craft Cocktails",
                            SpecialItemCategoryId = 2,
                            SpecialsMenuId = 7L
                        });
                });

            modelBuilder.Entity("Application.Domain.Entities.SpecialsMenuEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CronSchedule")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("cron_schedule");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<LocalDate?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<LocalTime?>("EndTime")
                        .HasColumnType("time")
                        .HasColumnName("end_time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("boolean")
                        .HasColumnName("is_recurring");

                    b.Property<LocalDate>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<LocalTime>("StartTime")
                        .HasColumnType("time")
                        .HasColumnName("start_time");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.Property<long>("VenueId")
                        .HasColumnType("bigint")
                        .HasColumnName("venue_id");

                    b.HasKey("Id")
                        .HasName("pk_specials_menus");

                    b.HasIndex("VenueId")
                        .HasDatabaseName("ix_specials_menus_venue_id");

                    b.ToTable("specials_menus", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17507882249137982L),
                            CronSchedule = "0 21 * * 5,6",
                            Description = "Live music showcasing the best in local, regional, and national talent. Various genres from rock to jazz.",
                            EndTime = new NodaTime.LocalTime(23, 0),
                            IsActive = true,
                            IsRecurring = true,
                            StartDate = new NodaTime.LocalDate(2025, 5, 3),
                            StartTime = new NodaTime.LocalTime(21, 0),
                            Title = "Live Music Weekend",
                            VenueId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17507882249139311L),
                            CronSchedule = "0 16 * * 1-5",
                            Description = "Enjoy $1 off all draft beers and $5 house wines.",
                            EndTime = new NodaTime.LocalTime(18, 0),
                            IsActive = true,
                            IsRecurring = true,
                            StartDate = new NodaTime.LocalDate(2025, 5, 1),
                            StartTime = new NodaTime.LocalTime(16, 0),
                            Title = "Happy Hour",
                            VenueId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17507882249139731L),
                            Description = "Sweet and spicy chicken sandwich with sweet n spicy sauce, lettuce, and pickles.",
                            EndDate = new NodaTime.LocalDate(2025, 5, 27),
                            EndTime = new NodaTime.LocalTime(22, 0),
                            IsActive = true,
                            IsRecurring = false,
                            StartDate = new NodaTime.LocalDate(2025, 5, 20),
                            StartTime = new NodaTime.LocalTime(11, 0),
                            Title = "Weekly Food Special",
                            VenueId = 2L
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17507882249139737L),
                            CronSchedule = "0 21 * * 3",
                            Description = "Pub Trivia with first and second place prizes. Sponsored by Bacardi Oakheart.",
                            EndTime = new NodaTime.LocalTime(23, 0),
                            IsActive = true,
                            IsRecurring = true,
                            StartDate = new NodaTime.LocalDate(2025, 5, 22),
                            StartTime = new NodaTime.LocalTime(21, 0),
                            Title = "Wednesday Night Quizzo",
                            VenueId = 2L
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17507882249139776L),
                            CronSchedule = "0 11 * * 2",
                            Description = "Every Tuesday is Mug Club Night. Our valued Mug club members enjoy their First beer, of their choice, on US!!",
                            EndTime = new NodaTime.LocalTime(23, 0),
                            IsActive = true,
                            IsRecurring = true,
                            StartDate = new NodaTime.LocalDate(2025, 5, 21),
                            StartTime = new NodaTime.LocalTime(11, 0),
                            Title = "Mug Club Tuesday",
                            VenueId = 2L
                        },
                        new
                        {
                            Id = 6L,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17507882249139779L),
                            CronSchedule = "0 10 * * 0",
                            Description = "Special brunch menu served from 10am to 2pm every Sunday.",
                            EndTime = new NodaTime.LocalTime(14, 0),
                            IsActive = true,
                            IsRecurring = true,
                            StartDate = new NodaTime.LocalDate(2025, 5, 18),
                            StartTime = new NodaTime.LocalTime(10, 0),
                            Title = "Sunday Brunch",
                            VenueId = 3L
                        },
                        new
                        {
                            Id = 7L,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(17507882249139782L),
                            CronSchedule = "0 16 * * 2-6",
                            Description = "Enjoy our specially crafted cocktails at a reduced price.",
                            EndTime = new NodaTime.LocalTime(18, 0),
                            IsActive = true,
                            IsRecurring = true,
                            StartDate = new NodaTime.LocalDate(2025, 5, 21),
                            StartTime = new NodaTime.LocalTime(16, 0),
                            Title = "Cocktail Hour",
                            VenueId = 3L
                        });
                });

            modelBuilder.Entity("Application.Domain.Entities.VenueCategoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.Property<string>("Icon")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("icon");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer")
                        .HasColumnName("sort_order");

                    b.HasKey("Id")
                        .HasName("pk_venue_categories");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_venue_categories_name");

                    b.ToTable("venue_categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Dining establishments offering food and beverages",
                            Icon = "🍽️",
                            Name = "Restaurant",
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Venues focused on drinks and nightlife",
                            Icon = "🍸",
                            Name = "Bar",
                            SortOrder = 2
                        },
                        new
                        {
                            Id = 3,
                            Description = "Casual spots for coffee and light meals",
                            Icon = "☕",
                            Name = "Cafe",
                            SortOrder = 3
                        },
                        new
                        {
                            Id = 4,
                            Description = "Venues for dancing and late-night entertainment",
                            Icon = "🪩",
                            Name = "Nightclub",
                            SortOrder = 4
                        },
                        new
                        {
                            Id = 5,
                            Description = "Casual venues with food, drinks, and often live music",
                            Icon = "🍺",
                            Name = "Pub",
                            SortOrder = 5
                        },
                        new
                        {
                            Id = 6,
                            Description = "Venues producing wine, offering tastings, food pairings, and live music",
                            Icon = "🍷",
                            Name = "Winery",
                            SortOrder = 6
                        },
                        new
                        {
                            Id = 7,
                            Description = "Venues brewing their own beer, often with food and live music",
                            Icon = "🍻",
                            Name = "Brewery",
                            SortOrder = 7
                        },
                        new
                        {
                            Id = 9,
                            Description = "Sophisticated venues with cocktails, small plates, and live music",
                            Icon = "🛋️",
                            Name = "Lounge",
                            SortOrder = 8
                        },
                        new
                        {
                            Id = 10,
                            Description = "Intimate dining venues with quality food, wine, and occasional live music",
                            Icon = "🥂",
                            Name = "Bistro",
                            SortOrder = 9
                        });
                });

            modelBuilder.Entity("Application.Domain.Entities.VenueEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("venue_category_id");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("country");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Locality")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("locality");

                    b.Property<Point>("Location")
                        .HasColumnType("geography (point)")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone_number");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("postal_code");

                    b.Property<string>("ProfileImage")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("profile_image");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("region");

                    b.Property<string>("SecondaryAddress")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("secondary_address");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("street_address");

                    b.Property<string>("Website")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("website");

                    b.HasKey("Id")
                        .HasName("pk_venues");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_venues_venue_category_id");

                    b.HasIndex("Location")
                        .HasDatabaseName("ix_venues_location");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Location"), "GIST");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_venues_name");

                    b.ToTable("venues", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CategoryId = 7,
                            Country = "United States",
                            Description = "Local craft brewery featuring house-made beers, pub fare, and live entertainment in a cozy atmosphere.",
                            Email = "info@bullfrogbrewery.com",
                            IsActive = true,
                            Locality = "Williamsport",
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (-77.0057192 41.240432)"),
                            Name = "Bullfrog Brewery",
                            PhoneNumber = "(570) 326-4700",
                            PostalCode = "17701",
                            Region = "PA",
                            StreetAddress = "229 W 4th St",
                            Website = "https://bullfrogbrewery.com"
                        },
                        new
                        {
                            Id = 2L,
                            CategoryId = 1,
                            Country = "United States",
                            Description = "Family-friendly restaurant and ale house serving American cuisine with a great selection of craft beers and cocktails.",
                            Email = "info@thebrickyard.net",
                            IsActive = true,
                            Locality = "Williamsport",
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (-77.0037646 41.2409825)"),
                            Name = "The Brickyard Restaurant & Ale House",
                            PhoneNumber = "(570) 322-3876",
                            PostalCode = "17701",
                            Region = "PA",
                            StreetAddress = "343 Pine St",
                            Website = "https://thebrickyard.net"
                        },
                        new
                        {
                            Id = 3L,
                            CategoryId = 2,
                            Country = "United States",
                            Description = "Upscale gastropub featuring craft cocktails, local beers, and elevated bar food in a sophisticated atmosphere.",
                            Email = "info@thecrookedgoose.com",
                            IsActive = true,
                            Locality = "Williamsport",
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (-77.0047521 41.2407201)"),
                            Name = "The Crooked Goose",
                            PhoneNumber = "(570) 360-7435",
                            PostalCode = "17701",
                            Region = "PA",
                            StreetAddress = "215 W 4th St",
                            Website = "https://thecrookedgoose.com"
                        });
                });

            modelBuilder.Entity("Application.Domain.Entities.BusinessHoursEntity", b =>
                {
                    b.HasOne("Application.Domain.Entities.DayOfWeekEntity", "DayOfWeek")
                        .WithMany("BusinessHours")
                        .HasForeignKey("DayOfWeekId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_business_hours_days_of_week_day_of_week_id");

                    b.HasOne("Application.Domain.Entities.VenueEntity", "Venue")
                        .WithMany("BusinessHours")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_business_hours_venues_venue_id");

                    b.Navigation("DayOfWeek");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("Application.Domain.Entities.SpecialItemEntity", b =>
                {
                    b.HasOne("Application.Domain.Entities.SpecialItemCategoryEntity", "Category")
                        .WithMany("SpecialItems")
                        .HasForeignKey("SpecialItemCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_special_items_special_item_categories_special_item_category");

                    b.HasOne("Application.Domain.Entities.SpecialsMenuEntity", "SpecialsMenu")
                        .WithMany("SpecialItems")
                        .HasForeignKey("SpecialsMenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_special_items_specials_menus_specials_menu_id");

                    b.Navigation("Category");

                    b.Navigation("SpecialsMenu");
                });

            modelBuilder.Entity("Application.Domain.Entities.SpecialsMenuEntity", b =>
                {
                    b.HasOne("Application.Domain.Entities.VenueEntity", "Venue")
                        .WithMany("SpecialsMenus")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_specials_menus_venues_venue_id");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("Application.Domain.Entities.VenueEntity", b =>
                {
                    b.HasOne("Application.Domain.Entities.VenueCategoryEntity", "VenueCategory")
                        .WithMany("Venues")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_venues_venue_categories_venue_category_id");

                    b.Navigation("VenueCategory");
                });

            modelBuilder.Entity("Application.Domain.Entities.DayOfWeekEntity", b =>
                {
                    b.Navigation("BusinessHours");
                });

            modelBuilder.Entity("Application.Domain.Entities.SpecialItemCategoryEntity", b =>
                {
                    b.Navigation("SpecialItems");
                });

            modelBuilder.Entity("Application.Domain.Entities.SpecialsMenuEntity", b =>
                {
                    b.Navigation("SpecialItems");
                });

            modelBuilder.Entity("Application.Domain.Entities.VenueCategoryEntity", b =>
                {
                    b.Navigation("Venues");
                });

            modelBuilder.Entity("Application.Domain.Entities.VenueEntity", b =>
                {
                    b.Navigation("BusinessHours");

                    b.Navigation("SpecialsMenus");
                });
#pragma warning restore 612, 618
        }
    }
}
